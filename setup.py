#-*- coding: utf-8 -*-


import couchdb
from flask import Flask
from flask_sqlalchemy import SQLAlchemy


UPLOAD_FOLDER = 'd:\\Smaga\\bitbucket\\geol_db_tools\\geol_db_tools\\uploads'
ALLOWED_EXTENSIONS = set(['xls', 'xlsx'])
COUCH_URL = 'http://localhost:5984'

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.secret_key = 'super secret key'
app.config['SESSION_TYPE'] = 'filesystem'
app.config['WTF_CSRF_ENABLED'] = False
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.debug = True

db = SQLAlchemy(app)
couch = couchdb.Server(COUCH_URL)
REGISTRY_COLUMNS = ['№ строки', 'Актуальность строки', '№ изменений', 'Операция внесения (добавление, изменение, удаление)',
'№ объекта', 'Признак комплексного', 'Вид документа регистрации1)', 'Наличие ГКМ паспорта в группе', 
'Орган регистрации (ТФИ, РГФ, ВСЕГЕИ, ЦНИГРИ, Роснедра, Минприроды, ГСЭ)', 'Номер документа', 'Дата регистрации', 
'Год регистрации (для сортировки)', '№ объекта в документе регистрации', 'Федеральный округ', 'Субъект РФ',
'Административный район', 'Лист м-ба 1000', 'Лист м-ба 200 (араб.)', 'Вид объекта2)', 'Название объекта', 
'Фонд недр (Р-распред., НР-нераспред.)', 'Вид пользования недрами (ГИН/Р+Д/ГИН+Р+Д)', 'Группа ПИ в госпрограмме3)',
'ПИ (перечень для объекта)', 'Название нормализ.', 'Название ПИ по ГБЗ', 'Группа ПИ ИС недра', 'Ед. измерения ПИ', 
'P3', 'P2', 'P1', 'С2', 'Без категор.', 'Запасы ABC1', 'Признак наличия ресурсных оценок', 'Наличие прогнозных ресурсов', 
'Признак наличия запасов', 'Вид документа апробации (протокол, отчет)', 'Номер', 'Дата', 'Орган апробации',
'№ в таблице координат для полигонов', 'Территория органа апробации', 'Вид координат (Т-точка, П-полигон)', 'Площадь, км2',
'Координата центра X', 'Координата центра Y', 'Источник координат4)', 'Входимость в лицензионыый участок', 'Достоверность координат',
'Координаты треб. проверки', 'Данные о районе (для определения координат)', 
'Другие документы об объекте (вид документа, №, год, стадия ГРР, авторы, организация)',
'Рекомендуемые работы (оценка ПР, апробация ПР, в фонд заявок, поиски, оценка и др.)']



try:
    cdb = couch['test_db_io']
except Exception as e:
    cdb = couch.create('test_db_io')

if 'regs_info' not in cdb:
    cdb.save({'_id': 'regs_info'})
    
